@using Potato.ViewModels
@model ChatViewModel

@{
    ViewData["Title"] = "Messenger";
}

<div class="chat-container">
    <h2 class="chat-title">@Model.ToWhom.FullName</h2>

    <div id="messageHistory" class="chat-history">
        @if (Model.History.Any())
        {
            foreach (var message in Model.History)
            {
                <div class="chat-message @(message.Sender.Id == Model.You.Id ? "sent" : "received")">
                    <div class="message-header">
                        <span class="sender">@message.Sender.FullName</span>
                        @* <span class="timestamp">@message.Timestamp.ToString("HH:mm")</span> *@
                        <span class="timestamp" data-utc="@message.Timestamp.ToString("O")Z"></span> @* Z добавлено для правильной конвертации, формат должен быть 2025-05-19T21:00:00Z *@

                    </div>
                    <div class="message-body">@message.Text</div>
                </div>
            }
        }
        else
        {
            <p class="no-messages">Нет сообщений</p>
        }
    </div>

    <form asp-action="NewMessage" method="post" class="chat-form">
        <input type="hidden" name="id" value="@Model.ToWhom.Id" />
        <div class="form-group">
            <textarea name="NewMessage.Text" required class="message-input" placeholder="Введите сообщение..."></textarea>
        </div>
        <div class="form-group">
            <button class="btn btn-send" type="submit">Отправить</button>
        </div>
    </form>
</div>
<link rel="stylesheet" href="~/css/Chat.css" asp-append-version="true" />

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    
    const currentUserFullName = "@Model.You.FullName";

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .build();

        connection.on("ReceiveMessage", function (sender, message, utcTime) {
        const localTime = new Date(utcTime).toLocaleTimeString([], {
            hour: '2-digit', minute: '2-digit'
        });

        const messageHtml = `
            <div class="chat-message received">
                <div class="message-header">
                    <span class="sender">${sender}</span>
                    <span class="timestamp">${localTime}</span>
                </div>
                <div class="message-body">${message}</div>
            </div>`;
        document.getElementById("messageHistory").insertAdjacentHTML("beforeend", messageHtml);
        scrollToBottom();
    });


    connection.start().then(() => {
        scrollToBottom(); // ⬅️ Прокрутка к последнему сообщению при открытии
    });

    const form = document.querySelector(".chat-form");
    const textarea = document.querySelector(".message-input");

    form.addEventListener("submit", async function (e) {
        e.preventDefault();

        const text = textarea.value.trim();
        const id = form.querySelector("input[name='id']").value;

        if (!text) return;

        const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        const messageHtml = `
            <div class="chat-message sent">
                <div class="message-header">
                    <span class="sender">${currentUserFullName}</span>
                    <span class="timestamp">${time}</span>
                </div>
                <div class="message-body">${text}</div>
            </div>`;

        document.getElementById("messageHistory").insertAdjacentHTML("beforeend", messageHtml);
        scrollToBottom();

        textarea.value = "";

        await fetch("/NewMessage", {
            method: "POST",
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id, NewMessage: { Text: text } })
        });
    });

    // ⌨️ Отправка по Enter, перенос по Shift+Enter, блок если пусто
    textarea.addEventListener("keydown", function (e) {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            const trimmed = textarea.value.trim();
            if (trimmed !== "") {
                form.dispatchEvent(new Event("submit", { cancelable: true }));
            }
        }
    });

    function scrollToBottom() {
        const container = document.getElementById("messageHistory");
        container.scrollTop = container.scrollHeight;
    }
    
   // Конвертируем время из UTC в локальное
        function formatTimestamps() {
        document.querySelectorAll('.timestamp').forEach(el => {
            const utcString = el.dataset.utc;
            if (!utcString) return;

            const localDate = new Date(utcString);
            if (isNaN(localDate)) return;

            const localTime = localDate.toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit'
            });

            el.textContent = localTime;
        });
    }
 document.addEventListener("DOMContentLoaded", function () {
        formatTimestamps(); // гарантированно после загрузки DOM
    });


</script>

